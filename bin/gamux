#!/usr/bin/env node

const λ        = require('ramda')
    , minimist = require('minimist')
    , path     = require('path')
    , gamux    = require(path.join(__dirname, '..', 'lib', 'index'))

const log  = console.log.bind(console)
    , warn = console.warn.bind(console)

function invalid() {
  warn("Unknown command, try `gamux --help` to learn the usage.")
}

function help() {
  log('Usage:')
  log('  $ gamux --help             | shows this message')
  log('  $ gamux --play loader:file | runs given game')
  log('  $ gamux --update           | updates library')
  log('  $ gamux                    | diagnosis tool')
}

function run(cmd, state) {
  const params = λ.split(':', cmd)
      , loader = params[0]
      , file   = params[1]

  return gamux.actions.play(loader, file, state)
}

function update(state) {
  return gamux.actions.deploy(state)
    .then(deployed => {
      if (deployed.length > 0) {
        log(deployed.length + ' game(s) deployed :)\n')
      } else {
        log('No games found :(\n')
      }
    })
}

function diagnose(state) {
  const display = λ.forEach(g => log(λ.join('', [
    '  ~ ', g.name, ' (', λ.join(', ', g.categories), ')'
    ])))

  return gamux.actions.search(state)
    .then(games => {
      if (games.length > 0) {
        log(games.length + ' game(s) found:')
        display(games)
        log('\nRun `gamux --update` to deploy updates.\n')
      } else {
        log('No games found :(\n')
      }
    })
}

function cli(argv, valid) {
  const keys = Object.keys(argv)

  const invalid = λ.not(
    λ.none(k => k === false,
      λ.map(f => f(keys), [

        // checks for commands
        k => argv._.length === 0,

        // checks for invalid options
        λ.pipe(
          λ.filter(k => valid.indexOf(k) === -1),
          λ.length,
          λ.equals(0)
        ),

        // checks for valid options
        λ.pipe(
          λ.filter(k => valid.indexOf(k) !== -1),
          λ.length,
          k => k <= 2
        )
      ])
    )
  )

  if (invalid) {
    // invalid usage
    return invalid()

  } else if (argv.help) {
    // gamux --help
    return help()

  } else {
    const state = gamux.state()

    if (argv.play) {
      // gamux --play loader:file
      return run(argv.play, state)

    } else if (argv.update) {
      // gamux --update
      return update(state)

    } else {
      // diagnose
      return  diagnose(state)
    }
  }
}

// initialize
cli(minimist(process.argv.slice(2)), ['help', 'play', 'update', '_'])
